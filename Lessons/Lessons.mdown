# Sams lessons

-----------------------

## Sun May 3

***Please ask me questions if you need help!!!***

## Starting up Haskell

What is a function?
What is a concrete type?
What is a polymorphic type?

Define the parts in this Haskell recursive function definition:

    factorial :: (Num a, Eq a) => a -> a
    factorial 0 = 1
    factorial n = factorial (n-1) * n

`factorial :: (Num a, Eq a) => a -> a`

`factorial`

`(Num a, Eq a)`

`a -> a`

`factorial 0 = 1`

`factorial n = factorial (n-1) * n`

`factorial (n-1)`


Is Haskell compiled or interpreted?
Whats the difference?
How do you compile a Haskell program?
How do you run a Haskell program?
How do you interpret a Haskell program?
What does GHC stand for?
What is the difference between GHC and GHCi?

Where does a Haskell program start?
What is the type definition of that function? 

What does IO mean?

Another way to write factorial:
    fact n = if n == 0 then 1 else fact (n-1) * n
    fact n | n == 0 = 1
           | otherwise = fact (n-1) * n


Define fibonacci in Haskell.
It is defined as Fib(0) = 0, Fib(1) = 1, and Fib(n) = Fib(n-1) + Fib(n-2)

Try it out for large values.

Look online for a faster version.

Define factorial using `product` and lists


----------------------


The heart of every Haskell application is recursion. 

Every loop and definition is made using recursion.

Define recursion.

Define map using recursion.
Define filter using recursion.
Define zip using recursion.
Define zipWith using recursion.
Look through Prelude and find any functions or things you don't understand or think are interesting.
